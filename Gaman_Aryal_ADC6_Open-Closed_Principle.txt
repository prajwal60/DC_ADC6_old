S.O.L.I.D principles

S - Single-responsiblity principle
O - Open-closed principle
L - Liskov substitution principle
I - Interface segregation principle
D - Dependency Inversion Principle

# OPEN-CLOSED principle
It is also known as OCP. The Object Oriented programming Open-closed principle states that Objects or entities should be open for extension, but closed for modification.
This simply means that a Software entities such as classes, modules, functions, methods etc should be easily extendable without modifying the entities itself. 
Open-closed principle and Single-responsiblity principle are highly dependable with each other so if we do not follow the Open-closed principle by modifying the methods or classes
then it starts to perform multiple task at a time which is directly violation of the Single-responsiblity principle.

For Example:-

def count_word_occurrences(word, localfile):
content = return open(file, "r").read()
 counter = 0
    for e in content.split():
        if word.lower() == e.lower():
            counter += 1
    return counter

But what if we wanted to extract content from other source, like for example a url? If we worked with the above function, to implement new functionality,
we would need to modify the existing function which would go against the Open/Closed Principle. So, the best way of managing code would be:

def read_localfile(file):
    '''Read file'''
    return open(file, "r").read()


def count_word_occurrences(word, content):
    '''Count number of word occurrences in a file'''

    counter = 0
    for e in content.split():
        if word.lower() == e.lower():
            counter += 1
    return counter